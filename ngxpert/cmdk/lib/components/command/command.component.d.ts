import { EventEmitter, QueryList, AfterViewInit, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { EmptyDirective } from '../../directives/empty/empty.directive';
import { ItemDirective } from '../../directives/item/item.directive';
import { CmdkCommandProps } from '../../types';
import { GroupComponent } from '../group/group.component';
import { SeparatorComponent } from '../separator/separator.component';
import { LoaderDirective } from '../../directives/loader/loader.directive';
import { ListComponent } from '../list/list.component';
import * as i0 from "@angular/core";
export declare class CommandComponent implements CmdkCommandProps, AfterViewInit, OnChanges, OnDestroy {
    valueChanged: EventEmitter<string>;
    value: string | undefined;
    ariaLabel?: string;
    loading?: boolean;
    filter: ((value: string, search: string) => boolean) | null | undefined;
    loop: boolean;
    items: QueryList<ItemDirective>;
    groups: QueryList<GroupComponent> | undefined;
    lists: QueryList<ListComponent> | undefined;
    separators: QueryList<SeparatorComponent> | undefined;
    empty: EmptyDirective | undefined;
    loader: LoaderDirective | undefined;
    search: string;
    get attrAriaLabel(): string | undefined;
    get id(): string;
    readonly panelId: string;
    private cmdkService;
    private keyManager;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    private initKeyManager;
    get filteredItems(): ItemDirective[];
    get filteredGroups(): GroupComponent[] | undefined;
    get filteredLists(): ListComponent[] | undefined;
    handleSearch(search: string): void;
    onKeyUp(ev: KeyboardEvent): void;
    ngOnDestroy(): void;
    private makeFirstItemActive;
    private setActiveGroupForActiveItem;
    private setValue;
    private scrollActiveIntoView;
    static ɵfac: i0.ɵɵFactoryDeclaration<CommandComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CommandComponent, "cmdk-command", ["cmdkCommand"], { "value": { "alias": "value"; "required": false; }; "ariaLabel": { "alias": "ariaLabel"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "loop": { "alias": "loop"; "required": false; }; }, { "valueChanged": "valueChanged"; }, ["empty", "loader", "items", "groups", "lists", "separators"], ["*"], true, never>;
}
